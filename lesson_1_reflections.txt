How did viewing a diff between two versions of a file help you see the bug that was introduced?
With diff, you can see only the portions that were changed and this helps you from scrolling through the entire document to look for changes.
With the changes shown one below the other, you can easily compare what has changed and can identify the bug easily.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
With access to the entire history, you can always revert back to the old code if your latest changes didn't work.
You can see patterns in your mistakes by going through all the versions and you can focus on correcting those patterns.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
With manual commits you can choose the logical points at which to commit. 
But, if you forget to commit you may lose your changes if your system crashes. Also, you may forget to make changes when it is required and the changes
between two versions may be too big.
With automatic saves, you may end up with too many versions and it becomes hard to find the version you are looking for.
It is also hard to figure out which version has what as there are no comments to give you information related to the changes in that version.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Version control systems, like Git, are used for version controls of coding projects as well. So, it is useful to save multiple files in one commit if the
changes in all the three files are related. Other systems like Google Docs, treat each file separately as it doesn't add much value to commit multiple files together as the files are not related in most cases.

How can you use the commands git log and git diff to view the history of files?
git log lets you see all the commits to the repository and the details of who made the changes and the time with a commit id.
git diff lets you compare 2 commits and see the differences between the two.

How might using version control make you more confident to make changes that could break something?
Knowing that I've older versions of code available, that I can revert back to, in case of bugs with code changes give me more confidence
to try out new stuff without fear of breaking something and not able to get back to my working version.

Now that you have your workspace set up, what do you want to try using Git for?
I would like to try using Git in a collaborative environment making pull requests etc.